language: generic
sudo: required
dist: trusty

branches:
  only:
    - master

env:
  global:
    - CMAKE_VERSION=3.7.1

cache:
    ccache: true
    apt: true
    yarn: true

matrix:
  fast_finish: true

  include:

    #Release Builds
    - os: linux
      node_js: 6
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'cmake', 'libprotobuf-dev', 'protobuf-compiler']
      env: CCOMPILER='gcc-6' CXXCOMPILER='g++-6' BUILD_TYPE=Release NODEBINDINGS=On NODE_VERSION=6

    - os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'cmake', 'libprotobuf-dev', 'protobuf-compiler']
      env: CCOMPILER='gcc-5' CXXCOMPILER='g++-5' BUILD_TYPE=Release

    - os: osx
      osx_image: xcode8.2
      node_js: 4
      env: CCOMPILER='clang' CXXCOMPILER='clang++' BUILD_TYPE=Release NODEBINDINGS=On NODE_VERSION=4

    - os: osx
      osx_image: xcode8.2
      env: CCOMPILER='clang' CXXCOMPILER='clang++' BUILD_TYPE=Release

    #Debug Builds
    - os: linux
      node_js: 4
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-6', 'cmake', 'libprotobuf-dev', 'protobuf-compiler']
      env: CCOMPILER='gcc-6' CXXCOMPILER='g++-6' BUILD_TYPE=Debug COVERAGE=ON SANITIZE=On NODEBINDINGS=On NODE_VERSION=4

    - os: linux
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-5', 'cmake', 'libprotobuf-dev', 'protobuf-compiler']
      env: CCOMPILER='gcc-5' CXXCOMPILER='g++-5' BUILD_TYPE=Debug

    - os: osx
      osx_image: xcode8.2
      node_js: 6
      env: CCOMPILER='clang' CXXCOMPILER='clang++' BUILD_TYPE=Debug SANITIZE=On NODEBINDINGS=On NODE_VERSION=6

before_install:
  - export CC=${CCOMPILER} CXX=${CXXCOMPILER}
  - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then brew update && brew install protobuf ccache && PATH=$PATH:/usr/local/opt/ccache/libexec; fi
  - if [[ "${NODEBINDINGS}" == "On" ]]; then
       nvm install ${NODE_VERSION};
       nvm use ${NODE_VERSION};
       ./scripts/configure-bindings.sh;
    fi
  - CMAKE_URL="https://mason-binaries.s3.amazonaws.com/${TRAVIS_OS_NAME}-x86_64/cmake/${CMAKE_VERSION}.tar.gz"
  - CMAKE_DIR="mason_packages/${TRAVIS_OS_NAME}-x86_64/cmake/${CMAKE_VERSION}"
  - mkdir -p ${CMAKE_DIR}
  - travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${CMAKE_DIR} || exit 1

install:
  - mkdir -p build
  - mkdir -p build/${BUILD_TYPE}
  - cd build/${BUILD_TYPE}
  - cmake ../.. -DCMAKE_BUILD_TYPE=${BUILD_TYPE:-Debug} -DSANITIZE=${SANITIZE:-OFF} -DCOVERAGE=${COVERAGE:-OFF} -DNODEBINDINGS=${NODEBINDINGS:-OFF}
  - make -j 2

script:
  - ctest --verbose #run unit test framework
  - if [[ "${NODEBINDINGS}" == "On" ]]; then
        cd ../../node/node-transit/;
        npm install;
        npm test;
        cd ../../build/${BUILD_TYPE};
    fi

after_success:
  - cd ..
  - |
    if [ -n "${COVERAGE}" ]; then
      bash <(curl -s https://codecov.io/bash)
    fi
